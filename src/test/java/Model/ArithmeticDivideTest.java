package Model;

import org.junit.jupiter.api.Test;

import java.math.BigDecimal;
import java.math.RoundingMode;

import static java.math.BigDecimal.valueOf;
import static org.junit.jupiter.api.Assertions.assertEquals;

class ArithmeticDivideTest {

    @Test
    void multiplyValidInputIntegerInteger() {
        //region IntegerInteger
//        combinationDivideValidNegative(valueOf(1), valueOf(1), "1");
//        combinationDivideValidNegative(valueOf(0), valueOf(1), "0");
//        combinationDivideValidNegative(valueOf(1), valueOf(1), "1");
//        combinationDivideValidNegative(valueOf(1), valueOf(1), "1");
//        combinationDivideValidNegative(valueOf(2), valueOf(1), "2");
//        combinationDivideValidNegative(valueOf(2), valueOf(2), "1");
//        combinationDivideValidNegative(valueOf(3), valueOf(1), "3");
//        combinationDivideValidNegative(valueOf(3), valueOf(3), "1");
//        combinationDivideValidNegative(valueOf(4), valueOf(1), "4");
//        combinationDivideValidNegative(valueOf(4), valueOf(2), "2");
//        combinationDivideValidNegative(valueOf(4), valueOf(4), "1");
//        combinationDivideValidNegative(valueOf(5), valueOf(1), "5");
//        combinationDivideValidNegative(valueOf(5), valueOf(5), "1");
//        combinationDivideValidNegative(valueOf(6), valueOf(1), "6");
//        combinationDivideValidNegative(valueOf(6), valueOf(2), "3");
//        combinationDivideValidNegative(valueOf(6), valueOf(3), "2");
//        combinationDivideValidNegative(valueOf(6), valueOf(6), "1");
//        combinationDivideValidNegative(valueOf(7), valueOf(1), "7");
//        combinationDivideValidNegative(valueOf(7), valueOf(7), "1");
//        combinationDivideValidNegative(valueOf(8), valueOf(1), "8");
//        combinationDivideValidNegative(valueOf(8), valueOf(2), "4");
//        combinationDivideValidNegative(valueOf(8), valueOf(4), "2");
//        combinationDivideValidNegative(valueOf(8), valueOf(8), "1");
//        combinationDivideValidNegative(valueOf(9), valueOf(1), "9");
//        combinationDivideValidNegative(valueOf(9), valueOf(3), "3");
//        combinationDivideValidNegative(valueOf(9), valueOf(9), "1");
//        //2 digits
//        combinationDivideValidNegative(valueOf(10), valueOf(1), "10");
//        combinationDivideValidNegative(valueOf(10), valueOf(2), "5");
//        combinationDivideValidNegative(valueOf(10), valueOf(5), "2");
//        combinationDivideValidNegative(valueOf(10), valueOf(10), "1");
//        combinationDivideValidNegative(valueOf(10), valueOf(100), "0.1");
//        combinationDivideValidNegative(valueOf(11), valueOf(11), "1");
//        combinationDivideValidNegative(valueOf(12), valueOf(2), "6");
//        combinationDivideValidNegative(valueOf(12), valueOf(3), "4");
//        combinationDivideValidNegative(valueOf(12), valueOf(4), "3");
//        combinationDivideValidNegative(valueOf(12), valueOf(6), "2");
//        combinationDivideValidNegative(valueOf(14), valueOf(2), "7");
//        combinationDivideValidNegative(valueOf(14), valueOf(7), "2");
//        combinationDivideValidNegative(valueOf(14), valueOf(133), "0.1052631578947368");
//        combinationDivideValidNegative(valueOf(15), valueOf(3), "5");
//        combinationDivideValidNegative(valueOf(15), valueOf(5), "3");
//        combinationDivideValidNegative(valueOf(16), valueOf(2), "8");
//        combinationDivideValidNegative(valueOf(16), valueOf(4), "4");
//        combinationDivideValidNegative(valueOf(16), valueOf(8), "2");
//        combinationDivideValidNegative(valueOf(18), valueOf(2), "9");
//        combinationDivideValidNegative(valueOf(18), valueOf(3), "6");
//        combinationDivideValidNegative(valueOf(18), valueOf(6), "3");
//        combinationDivideValidNegative(valueOf(18), valueOf(9), "2");
//        combinationDivideValidNegative(valueOf(20), valueOf(2), "10");
//        combinationDivideValidNegative(valueOf(20), valueOf(4), "5");
//        combinationDivideValidNegative(valueOf(20), valueOf(5), "4");
//        combinationDivideValidNegative(valueOf(20), valueOf(10), "2");
//        combinationDivideValidNegative(valueOf(21), valueOf(3), "7");
//        combinationDivideValidNegative(valueOf(21), valueOf(7), "3");
//        combinationDivideValidNegative(valueOf(21), valueOf(211), "0.0995260663507109");
//        combinationDivideValidNegative(valueOf(22), valueOf(22), "1");
//        combinationDivideValidNegative(valueOf(24), valueOf(3), "8");
//        combinationDivideValidNegative(valueOf(24), valueOf(4), "6");
//        combinationDivideValidNegative(valueOf(24), valueOf(6), "4");
//        combinationDivideValidNegative(valueOf(24), valueOf(8), "3");
//        combinationDivideValidNegative(valueOf(25), valueOf(5), "5");
//        combinationDivideValidNegative(valueOf(26), valueOf(256), "0.1015625");
//        combinationDivideValidNegative(valueOf(27), valueOf(3), "9");
//        combinationDivideValidNegative(valueOf(27), valueOf(9), "3");
//        combinationDivideValidNegative(valueOf(28), valueOf(4), "7");
//        combinationDivideValidNegative(valueOf(28), valueOf(7), "4");
//        combinationDivideValidNegative(valueOf(30), valueOf(3), "10");
//        combinationDivideValidNegative(valueOf(30), valueOf(5), "6");
//        combinationDivideValidNegative(valueOf(30), valueOf(6), "5");
//        combinationDivideValidNegative(valueOf(30), valueOf(10), "3");
//        combinationDivideValidNegative(valueOf(32), valueOf(4), "8");
//        combinationDivideValidNegative(valueOf(32), valueOf(8), "4");
//        combinationDivideValidNegative(valueOf(32), valueOf(322), "0.0993788819875776");
//        combinationDivideValidNegative(valueOf(33), valueOf(33), "1");
//        combinationDivideValidNegative(valueOf(35), valueOf(5), "7");
//        combinationDivideValidNegative(valueOf(35), valueOf(7), "5");
//        combinationDivideValidNegative(valueOf(36), valueOf(4), "9");
//        combinationDivideValidNegative(valueOf(36), valueOf(6), "6");
//        combinationDivideValidNegative(valueOf(36), valueOf(9), "4");
//        combinationDivideValidNegative(valueOf(38), valueOf(379), "0.1002638522427441");
//        combinationDivideValidNegative(valueOf(40), valueOf(4), "10");
//        combinationDivideValidNegative(valueOf(40), valueOf(5), "8");
//        combinationDivideValidNegative(valueOf(40), valueOf(8), "5");
//        combinationDivideValidNegative(valueOf(40), valueOf(10), "4");
//        combinationDivideValidNegative(valueOf(42), valueOf(6), "7");
//        combinationDivideValidNegative(valueOf(42), valueOf(7), "6");
//        combinationDivideValidNegative(valueOf(43), valueOf(433), "0.0993071593533487");
//        combinationDivideValidNegative(valueOf(44), valueOf(44), "1");
//        combinationDivideValidNegative(valueOf(45), valueOf(5), "9");
//        combinationDivideValidNegative(valueOf(45), valueOf(9), "5");
//        combinationDivideValidNegative(valueOf(48), valueOf(6), "8");
//        combinationDivideValidNegative(valueOf(48), valueOf(8), "6");
//        combinationDivideValidNegative(valueOf(49), valueOf(7), "7");
//        combinationDivideValidNegative(valueOf(50), valueOf(5), "10");
//        combinationDivideValidNegative(valueOf(50), valueOf(10), "5");
//        combinationDivideValidNegative(valueOf(50), valueOf(502), "0.099601593625498");
//        combinationDivideValidNegative(valueOf(54), valueOf(6), "9");
//        combinationDivideValidNegative(valueOf(54), valueOf(9), "6");
//        combinationDivideValidNegative(valueOf(54), valueOf(544), "0.0992647058823529");
//        combinationDivideValidNegative(valueOf(55), valueOf(55), "1");
//        combinationDivideValidNegative(valueOf(56), valueOf(7), "8");
//        combinationDivideValidNegative(valueOf(56), valueOf(8), "7");
//        combinationDivideValidNegative(valueOf(60), valueOf(6), "10");
//        combinationDivideValidNegative(valueOf(60), valueOf(10), "6");
//        combinationDivideValidNegative(valueOf(62), valueOf(625), "0.0992");
//        combinationDivideValidNegative(valueOf(63), valueOf(7), "9");
//        combinationDivideValidNegative(valueOf(63), valueOf(9), "7");
//        combinationDivideValidNegative(valueOf(64), valueOf(8), "8");
//        combinationDivideValidNegative(valueOf(65), valueOf(655), "0.099236641221374");
//        combinationDivideValidNegative(valueOf(66), valueOf(66), "1");
//        combinationDivideValidNegative(valueOf(70), valueOf(7), "10");
//        combinationDivideValidNegative(valueOf(70), valueOf(10), "7");
//        combinationDivideValidNegative(valueOf(72), valueOf(8), "9");
//        combinationDivideValidNegative(valueOf(72), valueOf(9), "8");
//        combinationDivideValidNegative(valueOf(74), valueOf(748), "0.0989304812834225");
//        combinationDivideValidNegative(valueOf(76), valueOf(766), "0.0992167101827676");
//        combinationDivideValidNegative(valueOf(77), valueOf(77), "1");
//        combinationDivideValidNegative(valueOf(80), valueOf(8), "10");
//        combinationDivideValidNegative(valueOf(80), valueOf(10), "8");
//        combinationDivideValidNegative(valueOf(81), valueOf(9), "9");
//        combinationDivideValidNegative(valueOf(86), valueOf(871), "0.0987370838117107");
//        combinationDivideValidNegative(valueOf(87), valueOf(877), "0.0992018244013683");
//        combinationDivideValidNegative(valueOf(88), valueOf(88), "1");
//        combinationDivideValidNegative(valueOf(90), valueOf(9), "10");
//        combinationDivideValidNegative(valueOf(90), valueOf(10), "9");
//        combinationDivideValidNegative(valueOf(98), valueOf(994), "0.0985915492957746");
//        combinationDivideValidNegative(valueOf(98), valueOf(988), "0.0991902834008097");
//        combinationDivideValidNegative(valueOf(99), valueOf(99), "1");
//        //3 digits
//        combinationDivideValidNegative(valueOf(100), valueOf(10), "10");
//        combinationDivideValidNegative(valueOf(100), valueOf(1000), "0.1");
//        combinationDivideValidNegative(valueOf(111), valueOf(111), "1");
//        combinationDivideValidNegative(valueOf(115), valueOf(80), "1.4375");
//        combinationDivideValidNegative(valueOf(211), valueOf(2111), "0.0999526290857414");
//        combinationDivideValidNegative(valueOf(222), valueOf(222), "1");
//        combinationDivideValidNegative(valueOf(322), valueOf(3222), "0.0999379267535692");
//        combinationDivideValidNegative(valueOf(333), valueOf(333), "1");
//        combinationDivideValidNegative(valueOf(433), valueOf(4333), "0.0999307639049158");
//        combinationDivideValidNegative(valueOf(444), valueOf(444), "1");
//        combinationDivideValidNegative(valueOf(544), valueOf(5444), "0.0999265246142542");
//        combinationDivideValidNegative(valueOf(555), valueOf(555), "1");
//        combinationDivideValidNegative(valueOf(655), valueOf(6555), "0.0999237223493516");
//        combinationDivideValidNegative(valueOf(666), valueOf(666), "1");
//        combinationDivideValidNegative(valueOf(766), valueOf(7666), "0.09992173232455");
//        combinationDivideValidNegative(valueOf(777), valueOf(777), "1");
//        combinationDivideValidNegative(valueOf(877), valueOf(8777), "0.0999202460977555");
//        combinationDivideValidNegative(valueOf(888), valueOf(888), "1");
//        combinationDivideValidNegative(valueOf(988), valueOf(9888), "0.0999190938511327");
//        combinationDivideValidNegative(valueOf(999), valueOf(999), "1");
//        //4 digits
//        combinationDivideValidNegative(valueOf(1000), valueOf(10000), "0.1");
//        combinationDivideValidNegative(valueOf(1111), valueOf(1111), "1");
//        combinationDivideValidNegative(valueOf(2112), valueOf(21112), "0.1000378931413414");
//        combinationDivideValidNegative(valueOf(2222), valueOf(2222), "1");
//        combinationDivideValidNegative(valueOf(3224), valueOf(32224), "0.1000496524329692");
//        combinationDivideValidNegative(valueOf(3333), valueOf(3333), "1");
//        combinationDivideValidNegative(valueOf(4336), valueOf(43336), "0.1000553812073103");
//        combinationDivideValidNegative(valueOf(4444), valueOf(4444), "1");
//        combinationDivideValidNegative(valueOf(5448), valueOf(54448), "0.1000587716720541");
//        combinationDivideValidNegative(valueOf(5555), valueOf(5555), "1");
//        combinationDivideValidNegative(valueOf(6560), valueOf(65560), "0.1000610128126907");
//        combinationDivideValidNegative(valueOf(6666), valueOf(6666), "1");
//        combinationDivideValidNegative(valueOf(7672), valueOf(76672), "0.1000626043405676");
//        combinationDivideValidNegative(valueOf(7777), valueOf(7777), "1");
//        combinationDivideValidNegative(valueOf(8784), valueOf(87784), "0.1000637929463228");
//        combinationDivideValidNegative(valueOf(8888), valueOf(8888), "1");
//        combinationDivideValidNegative(valueOf(9896), valueOf(98896), "0.1000647144475004");
//        combinationDivideValidNegative(valueOf(9999), valueOf(9999), "1");
//        //5 digits
//        combinationDivideValidNegative(valueOf(10000), valueOf(100000), "0.1");
//        combinationDivideValidNegative(valueOf(11111), valueOf(11111), "1");
//        combinationDivideValidNegative(valueOf(22222), valueOf(22222), "1");
//        combinationDivideValidNegative(valueOf(22345), valueOf(223456), "0.0999973149076328");
//        combinationDivideValidNegative(valueOf(33333), valueOf(33333), "1");
//        combinationDivideValidNegative(valueOf(34690), valueOf(346912), "0.0999965409095102");
//        combinationDivideValidNegative(valueOf(44444), valueOf(44444), "1");
//        combinationDivideValidNegative(valueOf(47035), valueOf(470368), "0.0999961732090618");
//        combinationDivideValidNegative(valueOf(55555), valueOf(55555), "1");
//        combinationDivideValidNegative(valueOf(59380), valueOf(593824), "0.099995958398448");
//        combinationDivideValidNegative(valueOf(66666), valueOf(66666), "1");
//        combinationDivideValidNegative(valueOf(71725), valueOf(717280), "0.0999958175329021");
//        combinationDivideValidNegative(valueOf(77777), valueOf(77777), "1");
//        combinationDivideValidNegative(valueOf(84070), valueOf(840736), "0.099995718037529");
//        combinationDivideValidNegative(valueOf(88888), valueOf(88888), "1");
//        combinationDivideValidNegative(valueOf(96415), valueOf(964192), "0.0999956440211078");
//        combinationDivideValidNegative(valueOf(99999), valueOf(99999), "1");
//        //6 digits
//        combinationDivideValidNegative(valueOf(100000), valueOf(1000000), "0.1");
//        combinationDivideValidNegative(valueOf(111111), valueOf(111111), "1");
//        combinationDivideValidNegative(valueOf(222222), valueOf(222222), "1");
//        combinationDivideValidNegative(valueOf(223456), valueOf(2234567), "0.0999996867402051");
//        combinationDivideValidNegative(valueOf(333333), valueOf(333333), "1");
//        combinationDivideValidNegative(valueOf(346912), valueOf(3469134), "0.0999995964410715");
//        combinationDivideValidNegative(valueOf(444444), valueOf(444444), "1");
//        combinationDivideValidNegative(valueOf(470368), valueOf(4703701), "0.0999995535430505");
//        combinationDivideValidNegative(valueOf(555555), valueOf(555555), "1");
//        combinationDivideValidNegative(valueOf(593824), valueOf(5938268), "0.0999995284820422");
//        combinationDivideValidNegative(valueOf(666666), valueOf(666666), "1");
//        combinationDivideValidNegative(valueOf(717280), valueOf(7172835), "0.0999995120478862");
//        combinationDivideValidNegative(valueOf(777777), valueOf(777777), "1");
//        combinationDivideValidNegative(valueOf(840736), valueOf(8407402), "0.0999995004402073");
//        combinationDivideValidNegative(valueOf(888888), valueOf(888888), "1");
//        combinationDivideValidNegative(valueOf(964192), valueOf(9641969), "0.0999994918050452");
//        combinationDivideValidNegative(valueOf(999999), valueOf(999999), "1");
//        //7 digits
//        combinationDivideValidNegative(valueOf(1000000), valueOf(10000000), "0.1");
//        combinationDivideValidNegative(valueOf(1111111), valueOf(1111111), "1");
//        combinationDivideValidNegative(valueOf(2222222), valueOf(2222222), "1");
//        combinationDivideValidNegative(valueOf(2234567), valueOf(22345678), "0.0999999641988934");
//        combinationDivideValidNegative(valueOf(3333333), valueOf(3333333), "1");
//        combinationDivideValidNegative(valueOf(3469134), valueOf(34691356), "0.0999999538790009");
//        combinationDivideValidNegative(valueOf(4444444), valueOf(4444444), "1");
//        combinationDivideValidNegative(valueOf(4703701), valueOf(47037034), "0.0999999489763747");
//        combinationDivideValidNegative(valueOf(5555555), valueOf(5555555), "1");
//        combinationDivideValidNegative(valueOf(5938268), valueOf(59382712), "0.0999999461122624");
//        combinationDivideValidNegative(valueOf(6666666), valueOf(6666666), "1");
//        combinationDivideValidNegative(valueOf(7172835), valueOf(71728390), "0.0999999442340752");
//        combinationDivideValidNegative(valueOf(7777777), valueOf(7777777), "1");
//        combinationDivideValidNegative(valueOf(8407402), valueOf(84074068), "0.0999999429074849");
//        combinationDivideValidNegative(valueOf(8888888), valueOf(8888888), "1");
//        combinationDivideValidNegative(valueOf(9641969), valueOf(96419746), "0.0999999419206103");
//        combinationDivideValidNegative(valueOf(9999999), valueOf(9999999), "1");
//        //8 digits
//        combinationDivideValidNegative(valueOf(10000000), valueOf(100000000), "0.1");
//        combinationDivideValidNegative(valueOf(11111111), valueOf(11111111), "1");
//        combinationDivideValidNegative(valueOf(22222222), valueOf(22222222), "1");
//        combinationDivideValidNegative(valueOf(22345678), valueOf(223456789), "0.0999999959723757");
//        combinationDivideValidNegative(valueOf(33333333), valueOf(33333333), "1");
//        combinationDivideValidNegative(valueOf(34691356), valueOf(346913578), "0.0999999948113879");
//        combinationDivideValidNegative(valueOf(44444444), valueOf(44444444), "1");
//        combinationDivideValidNegative(valueOf(47037034), valueOf(470370367), "0.0999999942598425");
//        combinationDivideValidNegative(valueOf(55555555), valueOf(55555555), "1");
//        combinationDivideValidNegative(valueOf(59382712), valueOf(593827156), "0.0999999939376299");
//        combinationDivideValidNegative(valueOf(66666666), valueOf(66666666), "1");
//        combinationDivideValidNegative(valueOf(71728390), valueOf(717283945), "0.0999999937263339");
//        combinationDivideValidNegative(valueOf(77777777), valueOf(77777777), "1");
//        combinationDivideValidNegative(valueOf(84074068), valueOf(840740734), "0.0999999935770925");
//        combinationDivideValidNegative(valueOf(88888888), valueOf(88888888), "1");
//        combinationDivideValidNegative(valueOf(96419746), valueOf(964197523), "0.0999999934660691");
//        combinationDivideValidNegative(valueOf(99999999), valueOf(99999999), "1");
//        //10 digits
//        combinationDivideValidNegative(valueOf(100000000), valueOf(1000000000), "0.1");
//        combinationDivideValidNegative(valueOf(111111111), valueOf(111111111), "1");
//        combinationDivideValidNegative(valueOf(222222222), valueOf(222222222), "1");
//        combinationDivideValidNegative(valueOf(223456781), valueOf(2234567891L), "0.0999999963751381");
//        combinationDivideValidNegative(valueOf(333333333), valueOf(333333333L), "1");
//        combinationDivideValidNegative(valueOf(346913562), valueOf(3469135782L), "0.0999999953302491");
//        combinationDivideValidNegative(valueOf(444444444), valueOf(444444444L), "1");
//        combinationDivideValidNegative(valueOf(470370343), valueOf(4703703673L), "0.0999999948338582");
//        combinationDivideValidNegative(valueOf(555555555), valueOf(555555555L), "1");
//        combinationDivideValidNegative(valueOf(593827124), valueOf(5938271564L), "0.0999999945438669");
//        combinationDivideValidNegative(valueOf(666666666), valueOf(666666666L), "1");
//        combinationDivideValidNegative(valueOf(717283905), valueOf(7172839455L), "0.0999999943537005");
//        combinationDivideValidNegative(valueOf(777777777), valueOf(777777777L), "1");
//        combinationDivideValidNegative(valueOf(840740686), valueOf(8407407346L), "0.0999999942193832");
//        combinationDivideValidNegative(valueOf(888888888), valueOf(888888888L), "1");
//        combinationDivideValidNegative(valueOf(964197467), valueOf(9641975237L), "0.0999999941194622");
//        combinationDivideValidNegative(valueOf(999999999), valueOf(999999999L), "1");
//        //11 digits
//        combinationDivideValidNegative(valueOf(1000000000), valueOf(10000000000L), "0.1");
//        combinationDivideValidNegative(valueOf(1111111111), valueOf(1111111111L), "1");
//        combinationDivideValidNegative(valueOf(2222222222L), valueOf(2222222222L), "1");
//        combinationDivideValidNegative(valueOf(2234567891L), valueOf(22345678912L), "0.0999999999910497");
//        combinationDivideValidNegative(valueOf(3333333333L), valueOf(3333333333L), "1");
//        combinationDivideValidNegative(valueOf(3469135782L), valueOf(34691357824L), "0.0999999999884698");
//        combinationDivideValidNegative(valueOf(4444444444L), valueOf(4444444444L), "1");
//        combinationDivideValidNegative(valueOf(4703703673L), valueOf(47037036736L), "0.0999999999872441");
//        combinationDivideValidNegative(valueOf(5555555555L), valueOf(5555555555L), "1");
//        combinationDivideValidNegative(valueOf(5938271564L), valueOf(59382715648L), "0.0999999999865281");
//        combinationDivideValidNegative(valueOf(6666666666L), valueOf(6666666666L), "1");
//        combinationDivideValidNegative(valueOf(7172839455L), valueOf(71728394560L), "0.0999999999860585");
//        combinationDivideValidNegative(valueOf(7777777777L), valueOf(7777777777L), "1");
//        combinationDivideValidNegative(valueOf(8407407346L), valueOf(84074073472L), "0.0999999999857269");
//        combinationDivideValidNegative(valueOf(8888888888L), valueOf(8888888888L), "1");
//        combinationDivideValidNegative(valueOf(9641975237L), valueOf(96419752384L), "0.0999999999854802");
//        combinationDivideValidNegative(valueOf(9999999999L), valueOf(9999999999L), "1");
//        //12 digits
//        combinationDivideValidNegative(valueOf(10000000000L), valueOf(100000000000L), "0.1");
//        combinationDivideValidNegative(valueOf(11111111111L), valueOf(11111111111L), "1");
//        combinationDivideValidNegative(valueOf(22222222222L), valueOf(22222222222L), "1");
//        combinationDivideValidNegative(valueOf(22345678912L), valueOf(223456789123L), "0.0999999999986575");
//        combinationDivideValidNegative(valueOf(33333333333L), valueOf(33333333333L), "1");
//        combinationDivideValidNegative(valueOf(34691357824L), valueOf(346913578246L), "0.0999999999982705");
//        combinationDivideValidNegative(valueOf(44444444444L), valueOf(44444444444L), "1");
//        combinationDivideValidNegative(valueOf(47037036736L), valueOf(470370367369L), "0.0999999999980866");
//        combinationDivideValidNegative(valueOf(55555555555L), valueOf(55555555555L), "1");
//        combinationDivideValidNegative(valueOf(59382715648L), valueOf(593827156492L), "0.0999999999979792");
//        combinationDivideValidNegative(valueOf(66666666666L), valueOf(66666666666L), "1");
//        combinationDivideValidNegative(valueOf(71728394560L), valueOf(717283945615L), "0.0999999999979088");
//        combinationDivideValidNegative(valueOf(77777777777L), valueOf(77777777777L), "1");
//        combinationDivideValidNegative(valueOf(84074073472L), valueOf(840740734738L), "0.099999999997859");
//        combinationDivideValidNegative(valueOf(88888888888L), valueOf(88888888888L), "1");
//        combinationDivideValidNegative(valueOf(96419752384L), valueOf(964197523861L), "0.099999999997822");
//        combinationDivideValidNegative(valueOf(99999999999L), valueOf(99999999999L), "1");
//        //13 digits
//        combinationDivideValidNegative(valueOf(100000000000L), valueOf(1000000000000L), "0.1");
//        combinationDivideValidNegative(valueOf(111111111111L), valueOf(111111111111L), "1");
//        combinationDivideValidNegative(valueOf(222222222222L), valueOf(222222222222L), "1");
//        combinationDivideValidNegative(valueOf(223456789123L), valueOf(2234567891234L), "0.099999999999821");
//        combinationDivideValidNegative(valueOf(333333333333L), valueOf(333333333333L), "1");
//        combinationDivideValidNegative(valueOf(346913578246L), valueOf(3469135782468L), "0.0999999999997694");
//        combinationDivideValidNegative(valueOf(444444444444L), valueOf(444444444444L), "1");
//        combinationDivideValidNegative(valueOf(470370367369L), valueOf(4703703673702L), "0.0999999999997449");
//        combinationDivideValidNegative(valueOf(555555555555L), valueOf(555555555555L), "1");
//        combinationDivideValidNegative(valueOf(593827156492L), valueOf(5938271564936L), "0.0999999999997306");
//        combinationDivideValidNegative(valueOf(666666666666L), valueOf(666666666666L), "1");
//        combinationDivideValidNegative(valueOf(717283945615L), valueOf(7172839456170L), "0.0999999999997212");
//        combinationDivideValidNegative(valueOf(777777777777L), valueOf(777777777777L), "1");
//        combinationDivideValidNegative(valueOf(840740734738L), valueOf(8407407347404L), "0.0999999999997145");
//        combinationDivideValidNegative(valueOf(888888888888L), valueOf(888888888888L), "1");
//        combinationDivideValidNegative(valueOf(964197523861L), valueOf(9641975238638L), "0.0999999999997096");
//        combinationDivideValidNegative(valueOf(999999999999L), valueOf(999999999999L), "1");
//        //14 digits
//        combinationDivideValidNegative(valueOf(1000000000000L), valueOf(10000000000000L), "0.1");
//        combinationDivideValidNegative(valueOf(1111111111111L), valueOf(1111111111111L), "1");
//        combinationDivideValidNegative(valueOf(2222222222222L), valueOf(2222222222222L), "1");
//        combinationDivideValidNegative(valueOf(2234567891234L), valueOf(22345678912345L), "0.0999999999999776");
//        combinationDivideValidNegative(valueOf(3333333333333L), valueOf(3333333333333L), "1");
//        combinationDivideValidNegative(valueOf(3469135782468L), valueOf(34691357824690L), "0.0999999999999712");
//        combinationDivideValidNegative(valueOf(4444444444444L), valueOf(4444444444444L), "1");
//        combinationDivideValidNegative(valueOf(4703703673702L), valueOf(47037036737035L), "0.0999999999999681");
//        combinationDivideValidNegative(valueOf(5555555555555L), valueOf(5555555555555L), "1");
//        combinationDivideValidNegative(valueOf(5938271564936L), valueOf(59382715649380L), "0.0999999999999663");
//        combinationDivideValidNegative(valueOf(6666666666666L), valueOf(6666666666666L), "1");
//        combinationDivideValidNegative(valueOf(7172839456170L), valueOf(71728394561725L), "0.0999999999999651");
//        combinationDivideValidNegative(valueOf(7777777777777L), valueOf(7777777777777L), "1");
//        combinationDivideValidNegative(valueOf(8407407347404L), valueOf(84074073474070L), "0.0999999999999643");
//        combinationDivideValidNegative(valueOf(8888888888888L), valueOf(8888888888888L), "1");
//        combinationDivideValidNegative(valueOf(9641975238638L), valueOf(96419752386415L), "0.0999999999999637");
//        combinationDivideValidNegative(valueOf(9999999999999L), valueOf(9999999999999L), "1");
//        //15 digits
//        combinationDivideValidNegative(valueOf(10000000000000L), valueOf(100000000000000L), "0.1");
//        combinationDivideValidNegative(valueOf(11111111111111L), valueOf(11111111111111L), "1");
//        combinationDivideValidNegative(valueOf(22222222222222L), valueOf(22222222222222L), "1");
//        combinationDivideValidNegative(valueOf(22345678912345L), valueOf(223456789123456L), "0.0999999999999973");
//        combinationDivideValidNegative(valueOf(33333333333333L), valueOf(33333333333333L), "1");
//        combinationDivideValidNegative(valueOf(34691357824690L), valueOf(346913578246912L), "0.0999999999999965");
//        combinationDivideValidNegative(valueOf(44444444444444L), valueOf(44444444444444L), "1");
//        combinationDivideValidNegative(valueOf(47037036737035L), valueOf(470370367370368L), "0.0999999999999962");
//        combinationDivideValidNegative(valueOf(55555555555555L), valueOf(55555555555555L), "1");
//        combinationDivideValidNegative(valueOf(59382715649380L), valueOf(593827156493824L), "0.099999999999996");
//        combinationDivideValidNegative(valueOf(66666666666666L), valueOf(66666666666666L), "1");
//        combinationDivideValidNegative(valueOf(71728394561725L), valueOf(717283945617280L), "0.0999999999999958");
//        combinationDivideValidNegative(valueOf(77777777777777L), valueOf(77777777777777L), "1");
//        combinationDivideValidNegative(valueOf(84074073474070L), valueOf(840740734740736L), "0.0999999999999957");
//        combinationDivideValidNegative(valueOf(88888888888888L), valueOf(88888888888888L), "1");
//        combinationDivideValidNegative(valueOf(96419752386415L), valueOf(964197523864192L), "0.0999999999999956");
//        combinationDivideValidNegative(valueOf(99999999999999L), valueOf(99999999999999L), "1");
//        //16 digits
//        combinationDivideValidNegative(valueOf(100000000000000L), valueOf(1000000000000000L), "0.1");
//        combinationDivideValidNegative(valueOf(111111111111111L), valueOf(111111111111111L), "1");
//        combinationDivideValidNegative(valueOf(222222222222222L), valueOf(222222222222222L), "1");
//        combinationDivideValidNegative(valueOf(223456789123456L), valueOf(2234567891234567L), "0.0999999999999997");
//        combinationDivideValidNegative(valueOf(333333333333333L), valueOf(333333333333333L), "1");
//        combinationDivideValidNegative(valueOf(346913578246912L), valueOf(3469135782469134L), "0.0999999999999996");
//        combinationDivideValidNegative(valueOf(444444444444444L), valueOf(444444444444444L), "1");
//        combinationDivideValidNegative(valueOf(470370367370368L), valueOf(4703703673703701L), "0.0999999999999996");
//        combinationDivideValidNegative(valueOf(555555555555555L), valueOf(555555555555555L), "1");
//        combinationDivideValidNegative(valueOf(593827156493824L), valueOf(5938271564938268L), "0.0999999999999995");
//        combinationDivideValidNegative(valueOf(666666666666666L), valueOf(666666666666666L), "1");
//        combinationDivideValidNegative(valueOf(717283945617280L), valueOf(7172839456172835L), "0.0999999999999995");
//        combinationDivideValidNegative(valueOf(777777777777777L), valueOf(777777777777777L), "1");
//        combinationDivideValidNegative(valueOf(840740734740736L), valueOf(8407407347407402L), "0.0999999999999995");
//        combinationDivideValidNegative(valueOf(888888888888888L), valueOf(888888888888888L), "1");
//        combinationDivideValidNegative(valueOf(999999999999999L), valueOf(999999999999999L), "1");
//        //17 digits
//        combinationDivideValidNegative(valueOf(1111111111111111L), valueOf(1111111111111111L), "1");
//        combinationDivideValidNegative(valueOf(2222222222222222L), valueOf(2222222222222222L), "1");
//        combinationDivideValidNegative(valueOf(3333333333333333L), valueOf(3333333333333333L), "1");
//        combinationDivideValidNegative(valueOf(4444444444444444L), valueOf(4444444444444444L), "1");
//        combinationDivideValidNegative(valueOf(5555555555555555L), valueOf(5555555555555555L), "1");
//        combinationDivideValidNegative(valueOf(6666666666666666L), valueOf(6666666666666666L), "1");
//        combinationDivideValidNegative(valueOf(7777777777777777L), valueOf(7777777777777777L), "1");
//        combinationDivideValidNegative(valueOf(8888888888888888L), valueOf(8888888888888888L), "1");
//        combinationDivideValidNegative(valueOf(9999999999999999L), valueOf(9999999999999999L), "1");
//        combinationDivideValidNegative(valueOf(10000000000000000L), valueOf(10000000000000000L), "1");
//        //endregion
//    }
//
//    @Test
//    void multiplyValidInputIntegerDouble() {
//        combinationDivideValidNegative(valueOf(1), valueOf(0.1), "10");
//        combinationDivideValidNegative(valueOf(2), valueOf(0.1), "20");
//        combinationDivideValidNegative(valueOf(3), valueOf(0.3), "10");
//        combinationDivideValidNegative(valueOf(4), valueOf(0.4), "10");
//        combinationDivideValidNegative(valueOf(5), valueOf(0.5), "10");
//        combinationDivideValidNegative(valueOf(6), valueOf(0.6), "10");
//        combinationDivideValidNegative(valueOf(7), valueOf(0.7), "10");
//        combinationDivideValidNegative(valueOf(8), valueOf(0.8), "10");
//        combinationDivideValidNegative(valueOf(9), valueOf(0.9), "10");
//        combinationDivideValidNegative(valueOf(10), valueOf(0.1), "100");
//        combinationDivideValidNegative(valueOf(11), valueOf(1.1), "10");
//        combinationDivideValidNegative(valueOf(14), valueOf(13.3), "1.052631578947368");
//        combinationDivideValidNegative(valueOf(21), valueOf(21.1), "0.995260663507109");
//        combinationDivideValidNegative(valueOf(22), valueOf(2.2), "10");
//        combinationDivideValidNegative(valueOf(26), valueOf(25.6), "1.015625");
//        combinationDivideValidNegative(valueOf(32), valueOf(32.2), "0.993788819875776");
//        combinationDivideValidNegative(valueOf(33), valueOf(3.3), "10");
//        combinationDivideValidNegative(valueOf(38), valueOf(37.9), "1.002638522427441");
//        combinationDivideValidNegative(valueOf(43), valueOf(43.3), "0.9930715935334873");
//        combinationDivideValidNegative(valueOf(44), valueOf(4.4), "10");
//        combinationDivideValidNegative(valueOf(50), valueOf(50.2), "0.9960159362549801");
//        combinationDivideValidNegative(valueOf(54), valueOf(54.4), "0.9926470588235294");
//        combinationDivideValidNegative(valueOf(55), valueOf(5.5), "10");
//        combinationDivideValidNegative(valueOf(62), valueOf(62.5), "0.992");
//        combinationDivideValidNegative(valueOf(65), valueOf(65.5), "0.9923664122137405");
//        combinationDivideValidNegative(valueOf(66), valueOf(6.6), "10");
//        combinationDivideValidNegative(valueOf(74), valueOf(74.8), "0.9893048128342246");
//        combinationDivideValidNegative(valueOf(76), valueOf(76.6), "0.9921671018276762");
//        combinationDivideValidNegative(valueOf(77), valueOf(7.7), "10");
//        combinationDivideValidNegative(valueOf(86), valueOf(87.1), "0.9873708381171068");
//        combinationDivideValidNegative(valueOf(87), valueOf(87.7), "0.992018244013683");
//        combinationDivideValidNegative(valueOf(88), valueOf(8.8), "10");
//        combinationDivideValidNegative(valueOf(98), valueOf(99.4), "0.9859154929577465");
//        combinationDivideValidNegative(valueOf(98), valueOf(98.8), "0.9919028340080972");
//        combinationDivideValidNegative(valueOf(99), valueOf(9.9), "10");
//        combinationDivideValidNegative(valueOf(100), valueOf(0.1), "1000");
//        combinationDivideValidNegative(valueOf(111), valueOf(11.1), "10");
//        combinationDivideValidNegative(valueOf(211), valueOf(211.1), "0.9995262908574135");
//        combinationDivideValidNegative(valueOf(222), valueOf(22.2), "10");
//        combinationDivideValidNegative(valueOf(322), valueOf(322.2), "0.9993792675356921");
//        combinationDivideValidNegative(valueOf(333), valueOf(33.3), "10");
//        combinationDivideValidNegative(valueOf(433), valueOf(433.3), "0.9993076390491576");
//        combinationDivideValidNegative(valueOf(444), valueOf(44.4), "10");
//        combinationDivideValidNegative(valueOf(544), valueOf(544.4), "0.9992652461425422");
//        combinationDivideValidNegative(valueOf(555), valueOf(55.5), "10");
//        combinationDivideValidNegative(valueOf(655), valueOf(655.5), "0.9992372234935164");
//        combinationDivideValidNegative(valueOf(666), valueOf(66.6), "10");
//        combinationDivideValidNegative(valueOf(766), valueOf(766.6), "0.9992173232454996");
//        combinationDivideValidNegative(valueOf(777), valueOf(77.7), "10");
//        combinationDivideValidNegative(valueOf(877), valueOf(877.7), "0.999202460977555");
//        combinationDivideValidNegative(valueOf(888), valueOf(88.8), "10");
//        combinationDivideValidNegative(valueOf(988), valueOf(988.8), "0.9991909385113269");
//        combinationDivideValidNegative(valueOf(999), valueOf(99.9), "10");
//        combinationDivideValidNegative(valueOf(1000), valueOf(0.1), "10000");
//        combinationDivideValidNegative(valueOf(1111), valueOf(111.1), "10");
//        combinationDivideValidNegative(valueOf(2112), valueOf(2111.2), "1.0003789314134142");
//        combinationDivideValidNegative(valueOf(2222), valueOf(222.2), "10");
//        combinationDivideValidNegative(valueOf(3224), valueOf(3222.4), "1.0004965243296922");
//        combinationDivideValidNegative(valueOf(3333), valueOf(333.3), "10");
//        combinationDivideValidNegative(valueOf(4336), valueOf(4333.6), "1.0005538120731032");
//        combinationDivideValidNegative(valueOf(4444), valueOf(444.4), "10");
//        combinationDivideValidNegative(valueOf(5448), valueOf(5444.8), "1.0005877167205407");
//        combinationDivideValidNegative(valueOf(5555), valueOf(555.5), "10");
//        combinationDivideValidNegative(valueOf(6560), valueOf(6556), "1.0006101281269067");
//        combinationDivideValidNegative(valueOf(6666), valueOf(666.6), "10");
//        combinationDivideValidNegative(valueOf(7672), valueOf(7667.2), "1.0006260434056761");
//        combinationDivideValidNegative(valueOf(7777), valueOf(777.7), "10");
//        combinationDivideValidNegative(valueOf(8784), valueOf(8778.4), "1.0006379294632279");
//        combinationDivideValidNegative(valueOf(8888), valueOf(888.8), "10");
//        combinationDivideValidNegative(valueOf(9896), valueOf(9889.6), "1.000647144475004");
//        combinationDivideValidNegative(valueOf(9999), valueOf(999.9), "10");
//        combinationDivideValidNegative(valueOf(10000), valueOf(0.1), "100000");
//        combinationDivideValidNegative(valueOf(11111), valueOf(1111.1), "10");
//        combinationDivideValidNegative(valueOf(22222), valueOf(2222.2), "10");
//        combinationDivideValidNegative(valueOf(22345), valueOf(22345.6), "0.9999731490763282");
//        combinationDivideValidNegative(valueOf(33333), valueOf(3333.3), "10");
//        combinationDivideValidNegative(valueOf(34690), valueOf(34691.2), "0.9999654090951019");
//        combinationDivideValidNegative(valueOf(44444), valueOf(4444.4), "10");
//        combinationDivideValidNegative(valueOf(47035), valueOf(47036.8), "0.9999617320906184");
//        combinationDivideValidNegative(valueOf(55555), valueOf(5555.5), "10");
//        combinationDivideValidNegative(valueOf(59380), valueOf(59382.4), "0.9999595839844803");
//        combinationDivideValidNegative(valueOf(66666), valueOf(6666.6), "10");
//        combinationDivideValidNegative(valueOf(71725), valueOf(71728), "0.9999581753290207");
//        combinationDivideValidNegative(valueOf(77777), valueOf(7777.7), "10");
//        combinationDivideValidNegative(valueOf(84070), valueOf(84073.6), "0.9999571803752902");
//        combinationDivideValidNegative(valueOf(88888), valueOf(8888.8), "10");
//        combinationDivideValidNegative(valueOf(96415), valueOf(96419.2), "0.9999564402110783");
//        combinationDivideValidNegative(valueOf(99999), valueOf(9999.9), "10");
//        combinationDivideValidNegative(valueOf(100000), valueOf(0.1), "1000000");
//        combinationDivideValidNegative(valueOf(111111), valueOf(11111.1), "10");
//        combinationDivideValidNegative(valueOf(222222), valueOf(22222.2), "10");
//        combinationDivideValidNegative(valueOf(223456), valueOf(223456.7), "0.9999968674020515");
//        combinationDivideValidNegative(valueOf(333333), valueOf(33333.3), "10");
//        combinationDivideValidNegative(valueOf(346912), valueOf(346913.4), "0.9999959644107146");
//        combinationDivideValidNegative(valueOf(444444), valueOf(44444.4), "10");
//        combinationDivideValidNegative(valueOf(470368), valueOf(470370.1), "0.9999955354305046");
//        combinationDivideValidNegative(valueOf(555555), valueOf(55555.5), "10");
//        combinationDivideValidNegative(valueOf(593824), valueOf(593826.8), "0.9999952848204224");
//        combinationDivideValidNegative(valueOf(666666), valueOf(66666.6), "10");
//        combinationDivideValidNegative(valueOf(717280), valueOf(717283.5), "0.9999951204788623");
//        combinationDivideValidNegative(valueOf(777777), valueOf(77777.7), "10");
//        combinationDivideValidNegative(valueOf(840736), valueOf(840740.2), "0.9999950044020733");
//        combinationDivideValidNegative(valueOf(888888), valueOf(88888.8), "10");
//        combinationDivideValidNegative(valueOf(964192), valueOf(964196.9), "0.9999949180504521");
//        combinationDivideValidNegative(valueOf(999999), valueOf(99999.9), "10");
//        combinationDivideValidNegative(valueOf(1000000), valueOf(0.1), "10000000");
//        combinationDivideValidNegative(valueOf(1111111), valueOf(111111.1), "10");
//        combinationDivideValidNegative(valueOf(2222222), valueOf(222222.2), "10");
//        combinationDivideValidNegative(valueOf(2234567), valueOf(2234567.8), "0.9999996419889341");
//        combinationDivideValidNegative(valueOf(3333333), valueOf(333333.3), "10");
//        combinationDivideValidNegative(valueOf(3469134), valueOf(3469135.6), "0.9999995387900087");
//        combinationDivideValidNegative(valueOf(4444444), valueOf(444444.4), "10");
//        combinationDivideValidNegative(valueOf(4703701), valueOf(4703703.4), "0.9999994897637466");
//        combinationDivideValidNegative(valueOf(5555555), valueOf(555555.5), "10");
//        combinationDivideValidNegative(valueOf(5938268), valueOf(5938271.2), "0.9999994611226244");
//        combinationDivideValidNegative(valueOf(6666666), valueOf(666666.6), "10");
//        combinationDivideValidNegative(valueOf(7172835), valueOf(7172839), "0.9999994423407524");
//        combinationDivideValidNegative(valueOf(7777777), valueOf(777777.7), "10");
//        combinationDivideValidNegative(valueOf(8407402), valueOf(8407406.8), "0.9999994290748486");
//        combinationDivideValidNegative(valueOf(8888888), valueOf(888888.8), "10");
//        combinationDivideValidNegative(valueOf(9641969), valueOf(9641974.6), "0.9999994192061033");
//        combinationDivideValidNegative(valueOf(9999999), valueOf(999999.9), "10");
//        combinationDivideValidNegative(valueOf(10000000), valueOf(0.1), "100000000");
//        combinationDivideValidNegative(valueOf(11111111), valueOf(1111111.1), "10");
//        combinationDivideValidNegative(valueOf(22222222), valueOf(2222222.2), "10");
//        combinationDivideValidNegative(valueOf(22345678), valueOf(22345678.9), "0.9999999597237567");
//        combinationDivideValidNegative(valueOf(33333333), valueOf(3333333.3), "10");
//        combinationDivideValidNegative(valueOf(34691356), valueOf(34691357.8), "0.9999999481138787");
//        combinationDivideValidNegative(valueOf(44444444), valueOf(4444444.4), "10");
//        combinationDivideValidNegative(valueOf(47037034), valueOf(47037036.7), "0.9999999425984248");
//        combinationDivideValidNegative(valueOf(55555555), valueOf(5555555.5), "10");
//        combinationDivideValidNegative(valueOf(59382712), valueOf(59382715.6), "0.9999999393762989");
//        combinationDivideValidNegative(valueOf(66666666), valueOf(6666666.6), "10");
//        combinationDivideValidNegative(valueOf(71728390), valueOf(71728394.5), "0.9999999372633386");
//        combinationDivideValidNegative(valueOf(77777777), valueOf(7777777.7), "10");
//        combinationDivideValidNegative(valueOf(84074068), valueOf(84074073.4), "0.9999999357709246");
//        combinationDivideValidNegative(valueOf(88888888), valueOf(8888888.8), "10");
//        combinationDivideValidNegative(valueOf(96419746), valueOf(96419752.3), "0.9999999346606909");
//        combinationDivideValidNegative(valueOf(99999999), valueOf(9999999.9), "10");
//        combinationDivideValidNegative(valueOf(100000000), valueOf(0.1), "1000000000");
//        combinationDivideValidNegative(valueOf(111111111), valueOf(11111111.1), "10");
//        combinationDivideValidNegative(valueOf(222222222), valueOf(22222222.2), "10");
//        combinationDivideValidNegative(valueOf(223456781), valueOf(223456789.1), "0.999999963751381");
//        combinationDivideValidNegative(valueOf(333333333), valueOf(33333333.3), "10");
//        combinationDivideValidNegative(valueOf(346913562), valueOf(346913578.2), "0.9999999533024908");
//        combinationDivideValidNegative(valueOf(444444444), valueOf(44444444.4), "10");
//        combinationDivideValidNegative(valueOf(470370343), valueOf(470370367.3), "0.9999999483385823");
//        combinationDivideValidNegative(valueOf(555555555), valueOf(55555555.5), "10");
//        combinationDivideValidNegative(valueOf(593827124), valueOf(593827156.4), "0.9999999454386691");
//        combinationDivideValidNegative(valueOf(666666666), valueOf(66666666.6), "10");
//        combinationDivideValidNegative(valueOf(717283905), valueOf(717283945.5), "0.9999999435370048");
//        combinationDivideValidNegative(valueOf(777777777), valueOf(77777777.7), "10");
//        combinationDivideValidNegative(valueOf(840740686), valueOf(840740734.6), "0.9999999421938322");
//        combinationDivideValidNegative(valueOf(888888888), valueOf(88888888.8), "10");
//        combinationDivideValidNegative(valueOf(964197467), valueOf(964197523.7), "0.9999999411946218");
//        combinationDivideValidNegative(valueOf(999999999), valueOf(99999999.9), "10");
//        combinationDivideValidNegative(valueOf(1000000000), valueOf(0.1), "10000000000");
//        combinationDivideValidNegative(valueOf(1111111111), valueOf(111111111.1), "10");
//        combinationDivideValidNegative(valueOf(2222222222L), valueOf(222222222.2), "10");
//        combinationDivideValidNegative(valueOf(2234567891L), valueOf(2234567891.2), "0.9999999999104972");
//        combinationDivideValidNegative(valueOf(3333333333L), valueOf(333333333.3), "10");
//        combinationDivideValidNegative(valueOf(3469135782L), valueOf(3469135782.4), "0.9999999998846975");
//        combinationDivideValidNegative(valueOf(4444444444L), valueOf(444444444.4), "10");
//        combinationDivideValidNegative(valueOf(4703703673L), valueOf(4703703673.6), "0.9999999998724409");
//        combinationDivideValidNegative(valueOf(5555555555L), valueOf(555555555.5), "10");
//        combinationDivideValidNegative(valueOf(5938271564L), valueOf(5938271564.8), "0.9999999998652807");
//        combinationDivideValidNegative(valueOf(6666666666L), valueOf(666666666.6), "10");
//        combinationDivideValidNegative(valueOf(7172839455L), valueOf(717283945.6), "9.999999998605852");
//        combinationDivideValidNegative(valueOf(7777777777L), valueOf(777777777.7), "10");
//        combinationDivideValidNegative(valueOf(8407407346L), valueOf(8407407347.2), "0.9999999998572687");
//        combinationDivideValidNegative(valueOf(8888888888L), valueOf(888888888.8), "10");
//        combinationDivideValidNegative(valueOf(9641975237L), valueOf(9641975238.4), "0.9999999998548015");
//        combinationDivideValidNegative(valueOf(9999999999L), valueOf(999999999.9), "10");
//        combinationDivideValidNegative(valueOf(10000000000L), valueOf(0.1), "100000000000");
//        combinationDivideValidNegative(valueOf(11111111111L), valueOf(1111111111.1), "10");
//        combinationDivideValidNegative(valueOf(22222222222L), valueOf(2222222222.2), "10");
//        combinationDivideValidNegative(valueOf(22345678912L), valueOf(22345678912.3), "0.9999999999865746");
//        combinationDivideValidNegative(valueOf(33333333333L), valueOf(3333333333.3), "10");
//        combinationDivideValidNegative(valueOf(34691357824L), valueOf(34691357824.6), "0.9999999999827046");
//        combinationDivideValidNegative(valueOf(44444444444L), valueOf(4444444444.4), "10");
//        combinationDivideValidNegative(valueOf(47037036736L), valueOf(47037036736.9), "0.9999999999808661");
//        combinationDivideValidNegative(valueOf(55555555555L), valueOf(5555555555.5), "10");
//        combinationDivideValidNegative(valueOf(59382715648L), valueOf(59382715649.2), "0.9999999999797921");
//        combinationDivideValidNegative(valueOf(66666666666L), valueOf(6666666666.6), "10");
//        combinationDivideValidNegative(valueOf(71728394560L), valueOf(71728394561.5), "0.9999999999790878");
//        combinationDivideValidNegative(valueOf(77777777777L), valueOf(7777777777.7), "10");
//        combinationDivideValidNegative(valueOf(84074073472L), valueOf(84074073473.8), "0.9999999999785903");
//        combinationDivideValidNegative(valueOf(88888888888L), valueOf(8888888888.8), "10");
//        combinationDivideValidNegative(valueOf(96419752384L), valueOf(96419752386.1), "0.9999999999782202");
//        combinationDivideValidNegative(valueOf(99999999999L), valueOf(9999999999.9), "10");
//        combinationDivideValidNegative(valueOf(100000000000L), valueOf(0.1), "1000000000000");
//        combinationDivideValidNegative(valueOf(111111111111L), valueOf(11111111111.1), "10");
//        combinationDivideValidNegative(valueOf(222222222222L), valueOf(22222222222.2), "10");
//        combinationDivideValidNegative(valueOf(223456789123L), valueOf(223456789123.4), "0.9999999999982099");
//        combinationDivideValidNegative(valueOf(333333333333L), valueOf(33333333333.3), "10");
//        combinationDivideValidNegative(valueOf(346913578246L), valueOf(346913578246.8), "0.999999999997694");
//        combinationDivideValidNegative(valueOf(444444444444L), valueOf(44444444444.4), "10");
//        combinationDivideValidNegative(valueOf(470370367369L), valueOf(470370367370.2), "0.9999999999974488");
//        combinationDivideValidNegative(valueOf(555555555555L), valueOf(55555555555.5), "10");
//        combinationDivideValidNegative(valueOf(593827156492L), valueOf(593827156493.6), "0.9999999999973056");
//        combinationDivideValidNegative(valueOf(666666666666L), valueOf(66666666666.6), "10");
//        combinationDivideValidNegative(valueOf(717283945615L), valueOf(71728394561.7), "9.999999999972117");
//        combinationDivideValidNegative(valueOf(777777777777L), valueOf(77777777777.7), "10");
//        combinationDivideValidNegative(valueOf(840740734738L), valueOf(840740734740.4), "0.9999999999971454");
//        combinationDivideValidNegative(valueOf(888888888888L), valueOf(88888888888.8), "10");
//        combinationDivideValidNegative(valueOf(964197523861L), valueOf(964197523863.8), "0.999999999997096");
//        combinationDivideValidNegative(valueOf(999999999999L), valueOf(99999999999.9), "10");
//        combinationDivideValidNegative(valueOf(1000000000000L), valueOf(0.1), "10000000000000");
//        combinationDivideValidNegative(valueOf(1111111111111L), valueOf(111111111111.1), "10");
//        combinationDivideValidNegative(valueOf(2222222222222L), valueOf(222222222222.2), "10");
//        combinationDivideValidNegative(valueOf(2234567891234L), valueOf(2234567891234.5), "0.9999999999997762");
//        combinationDivideValidNegative(valueOf(3333333333333L), valueOf(333333333333.3), "10");
//        combinationDivideValidNegative(valueOf(3469135782468L), valueOf(346913578246.9), "9.9999999999971174");
//        combinationDivideValidNegative(valueOf(4444444444444L), valueOf(444444444444.4), "10");
//        combinationDivideValidNegative(valueOf(4703703673702L), valueOf(4703703673703.5), "0.9999999999996811");
//        combinationDivideValidNegative(valueOf(5555555555555L), valueOf(555555555555.5), "10");
//        combinationDivideValidNegative(valueOf(5938271564936L), valueOf(593827156493.8), "9.999999999996632");
//        combinationDivideValidNegative(valueOf(6666666666666L), valueOf(666666666666.6), "10");
//        combinationDivideValidNegative(valueOf(7172839456170L), valueOf(7172839456172.5), "0.9999999999996515");
//        combinationDivideValidNegative(valueOf(7777777777777L), valueOf(777777777777.7), "10");
//        combinationDivideValidNegative(valueOf(8407407347404L), valueOf(840740734740.7), "9.9999999999964317");
//        combinationDivideValidNegative(valueOf(8888888888888L), valueOf(888888888888.8), "10");
//        combinationDivideValidNegative(valueOf(9641975238638L), valueOf(9641975238641.5), "0.999999999999637");
//        combinationDivideValidNegative(valueOf(9999999999999L), valueOf(999999999999.9), "10");
//        combinationDivideValidNegative(valueOf(10000000000000L), valueOf(0.1), "100000000000000");
//        combinationDivideValidNegative(valueOf(11111111111111L), valueOf(1111111111111.1), "10");
//        combinationDivideValidNegative(valueOf(22222222222222L), valueOf(2222222222222.2), "10");
//        combinationDivideValidNegative(valueOf(22345678912345L), valueOf(22345678912345.6), "0.9999999999999731");
//        combinationDivideValidNegative(valueOf(33333333333333L), valueOf(3333333333333.3), "10");
//        combinationDivideValidNegative(valueOf(34691357824690L), valueOf(34691357824691.2), "0.9999999999999654");
//        combinationDivideValidNegative(valueOf(44444444444444L), valueOf(4444444444444.4), "10");
//        combinationDivideValidNegative(valueOf(47037036737035L), valueOf(47037036737036.8), "0.9999999999999617");
//        combinationDivideValidNegative(valueOf(55555555555555L), valueOf(5555555555555.5), "10");
//        combinationDivideValidNegative(valueOf(59382715649380L), valueOf(59382715649382.4), "0.9999999999999596");
//        combinationDivideValidNegative(valueOf(66666666666666L), valueOf(6666666666666.6), "10");
//        combinationDivideValidNegative(valueOf(71728394561725L), valueOf(7172839456172.8), "9.9999999999995818");
//        combinationDivideValidNegative(valueOf(77777777777777L), valueOf(7777777777777.7), "10");
//        combinationDivideValidNegative(valueOf(84074073474070L), valueOf(84074073474073.6), "0.9999999999999572");
//        combinationDivideValidNegative(valueOf(88888888888888L), valueOf(8888888888888.8), "10");
//        combinationDivideValidNegative(valueOf(96419752386415L), valueOf(96419752386419.2), "0.9999999999999564");
//        combinationDivideValidNegative(valueOf(99999999999999L), valueOf(9999999999999.9), "10");
//        combinationDivideValidNegative(valueOf(100000000000000L), valueOf(0.1), "1000000000000000");
//        combinationDivideValidNegative(valueOf(111111111111111L), valueOf(11111111111111.1), "10");
//        combinationDivideValidNegative(valueOf(222222222222222L), valueOf(22222222222222.2), "10");
//        combinationDivideValidNegative(valueOf(223456789123456L), valueOf(223456789123456.7), "0.9999999999999969");
//        combinationDivideValidNegative(valueOf(333333333333333L), valueOf(33333333333333.3), "10");
//        combinationDivideValidNegative(valueOf(346913578246912L), valueOf(346913578246913.4), "0.999999999999996");
//        combinationDivideValidNegative(valueOf(444444444444444L), valueOf(44444444444444.4), "10");
//        combinationDivideValidNegative(valueOf(470370367370368L), valueOf(470370367370370.1), "0.9999999999999955");
//        combinationDivideValidNegative(valueOf(555555555555555L), valueOf(55555555555555.5), "10");
//        combinationDivideValidNegative(valueOf(593827156493824L), valueOf(593827156493826.8), "0.9999999999999953");
//        combinationDivideValidNegative(valueOf(666666666666666L), valueOf(66666666666666.6), "10");
//        combinationDivideValidNegative(valueOf(717283945617280L), valueOf(717283945617283.5), "0.9999999999999951");
//        combinationDivideValidNegative(valueOf(777777777777777L), valueOf(77777777777777.7), "10");
//        combinationDivideValidNegative(valueOf(840740734740736L), valueOf(840740734740740.2), "0.999999999999995");
//        combinationDivideValidNegative(valueOf(888888888888888L), valueOf(88888888888888.8), "10");
//        combinationDivideValidNegative(valueOf(999999999999999L), valueOf(99999999999999.9), "10");
//        combinationDivideValidNegative(valueOf(1000000000000000L), valueOf(0.1), "10000000000000000");
//        combinationDivideValidNegative(valueOf(1111111111111111L), valueOf(111111111111111.1), "10");
//        combinationDivideValidNegative(valueOf(2222222222222222L), valueOf(222222222222222.2), "10");
//        combinationDivideValidNegative(valueOf(3333333333333333L), valueOf(333333333333333.3), "10");
//        combinationDivideValidNegative(valueOf(4444444444444444L), valueOf(444444444444444.4), "10");
//        combinationDivideValidNegative(valueOf(5555555555555555L), valueOf(555555555555555.5), "10");
//        combinationDivideValidNegative(valueOf(6666666666666666L), valueOf(666666666666666.6), "10");
//        combinationDivideValidNegative(valueOf(7777777777777777L), valueOf(777777777777777.8), "9.9999999999999987");
//        combinationDivideValidNegative(valueOf(8888888888888888L), valueOf(888888888888888.8), "10");
//        combinationDivideValidNegative(valueOf(9999999999999999L), valueOf(999999999999999.9), "10");
//        combinationDivideValidNegative(valueOf(10000000000000000L), valueOf(0.1), "100000000000000000");
//
//        combinationDivideValidNegative(valueOf(108), valueOf(73), "1.479452054794521");
//        combinationDivideValidNegative(valueOf(129), valueOf(17), "7.588235294117647");
//        combinationDivideValidNegative(valueOf(138), valueOf(25), "5.52");
//        combinationDivideValidNegative(valueOf(145), valueOf(45), "3.222222222222222");
//        combinationDivideValidNegative(valueOf(152), valueOf(77), "1.974025974025974");
//        combinationDivideValidNegative(valueOf(161), valueOf(334), "0.4820359281437126");
//        combinationDivideValidNegative(valueOf(171), valueOf(45), "3.8");
//        combinationDivideValidNegative(valueOf(185), valueOf(64), "2.890625");
//        combinationDivideValidNegative(valueOf(197), valueOf(86), "2.290697674418605");
//
//        combinationDivideValidNegative(valueOf(210), valueOf(21), "10");
//        combinationDivideValidNegative(valueOf(214), valueOf(12), "17.83333333333333");
//        combinationDivideValidNegative(valueOf(226), valueOf(3642), "0.0620538165842943");
//        combinationDivideValidNegative(valueOf(237), valueOf(1), "237");
//        combinationDivideValidNegative(valueOf(244), valueOf(42), "5.80952380952381");
//        combinationDivideValidNegative(valueOf(253), valueOf(531), "0.4764595103578154");
//        combinationDivideValidNegative(valueOf(260), valueOf(112), "2.321428571428571");
//        combinationDivideValidNegative(valueOf(278), valueOf(8), "34.75");
//        combinationDivideValidNegative(valueOf(286), valueOf(30), "9.533333333333333");
//
//        combinationDivideValidNegative(valueOf(301), valueOf(5), "60.2");
//        combinationDivideValidNegative(valueOf(314), valueOf(12), "26.1666666666666667");
//        combinationDivideValidNegative(valueOf(328), valueOf(13), "25.2307692307692308");
//        combinationDivideValidNegative(valueOf(331), valueOf(87), "3.8045977011494253");
//        combinationDivideValidNegative(valueOf(348), valueOf(63), "5.5238095238095238");
//        combinationDivideValidNegative(valueOf(356), valueOf(44), "8.0909090909090909");
//        combinationDivideValidNegative(valueOf(367), valueOf(89), "4.1235955056179775");
//        combinationDivideValidNegative(valueOf(376), valueOf(661), "0.5688350983358548");
//        combinationDivideValidNegative(valueOf(389), valueOf(334), "1.1646706586826347");
//
//        combinationDivideValidNegative(valueOf(403), valueOf(2), "201.5");
//        combinationDivideValidNegative(valueOf(418), valueOf(56), "7.4642857142857143");
//        combinationDivideValidNegative(valueOf(428), valueOf(782), "0.5473145780051151");
//        combinationDivideValidNegative(valueOf(431), valueOf(3368), "0.1279691211401425");
//        combinationDivideValidNegative(valueOf(449), valueOf(3225), "0.1392248062015504");
//        combinationDivideValidNegative(valueOf(453), valueOf(12), "37.75");
//        combinationDivideValidNegative(valueOf(467), valueOf(89), "5.2471910112359551");
//        combinationDivideValidNegative(valueOf(479), valueOf(78), "6.141025641025641");
//        combinationDivideValidNegative(valueOf(492), valueOf(996), "0.4939759036144578");
//
//        combinationDivideValidNegative(valueOf(512), valueOf(5), "102.4");
//        combinationDivideValidNegative(valueOf(524), valueOf(51), "10.2745098039215686");
//        combinationDivideValidNegative(valueOf(539), valueOf(5842), "0.0922629236562821");
//        combinationDivideValidNegative(valueOf(547), valueOf(21), "26.0476190476190476");
//        combinationDivideValidNegative(valueOf(553), valueOf(841235), "0.0006573668475515");
//        combinationDivideValidNegative(valueOf(562), valueOf(52), "10.8076923076923077");
//        combinationDivideValidNegative(valueOf(570), valueOf(448), "1.2723214285714286");
//        combinationDivideValidNegative(valueOf(586), valueOf(236), "2.4830508474576271");
//        combinationDivideValidNegative(valueOf(599), valueOf(56736), "0.0105576706147772");
//
//        combinationDivideValidNegative(valueOf(614), valueOf(214), "2.8691588785046729");
//        combinationDivideValidNegative(valueOf(628), valueOf(120), "5.2333333333333333");
//        combinationDivideValidNegative(valueOf(638), valueOf(2289), "0.2787243337702053");
//        combinationDivideValidNegative(valueOf(642), valueOf(512), "1.25390625");
//        combinationDivideValidNegative(valueOf(657), valueOf(51), "12.8823529411764706");
//        combinationDivideValidNegative(valueOf(661), valueOf(6996), "0.0944825614636935");
//        combinationDivideValidNegative(valueOf(679), valueOf(511), "1.3287671232876712");
//        combinationDivideValidNegative(valueOf(683), valueOf(531), "1.2862523540489642");
//        combinationDivideValidNegative(valueOf(690), valueOf(789), "0.8745247148288973");
//
//        combinationDivideValidNegative(valueOf(704), valueOf(52), "13.5384615384615385");
//        combinationDivideValidNegative(valueOf(718), valueOf(4521), "0.1588144215881442");
//        combinationDivideValidNegative(valueOf(721), valueOf(45), "16.0222222222222222");
//        combinationDivideValidNegative(valueOf(739), valueOf(2365), "0.3124735729386892");
//        combinationDivideValidNegative(valueOf(742), valueOf(56), "13.25");
//        combinationDivideValidNegative(valueOf(756), valueOf(4453), "0.1697731866157647");
//        combinationDivideValidNegative(valueOf(763), valueOf(56), "13.625");
//        combinationDivideValidNegative(valueOf(777), valueOf(4452), "0.1745283018867925");
//        combinationDivideValidNegative(valueOf(785), valueOf(41), "19.1463414634146341");
//
//        combinationDivideValidNegative(valueOf(812), valueOf(66), "12.303030303030303");
//        combinationDivideValidNegative(valueOf(824), valueOf(12), "68.6666666666666667");
//        combinationDivideValidNegative(valueOf(831), valueOf(6631), "0.1253204644849947");
//        combinationDivideValidNegative(valueOf(847), valueOf(45), "18.8222222222222222");
//        combinationDivideValidNegative(valueOf(856), valueOf(756), "1.1322751322751323");
//        combinationDivideValidNegative(valueOf(862), valueOf(5139), "0.1677369137964585");
//        combinationDivideValidNegative(valueOf(879), valueOf(48), "18.3125");
//        combinationDivideValidNegative(valueOf(882), valueOf(459), "1.9215686274509804");
//        combinationDivideValidNegative(valueOf(893), valueOf(4223), "0.2114610466493014");
//
//        combinationDivideValidNegative(valueOf(905), valueOf(25), "36.2");
//        combinationDivideValidNegative(valueOf(914), valueOf(55), "16.6181818181818182");
//        combinationDivideValidNegative(valueOf(927), valueOf(986), "0.9401622718052738");
//        combinationDivideValidNegative(valueOf(935), valueOf(563), "1.6607460035523979");
//        combinationDivideValidNegative(valueOf(946), valueOf(887), "1.0665163472378805");
//        combinationDivideValidNegative(valueOf(952), valueOf(96), "9.9166666666666667");
//        combinationDivideValidNegative(valueOf(963), valueOf(367), "2.6239782016348774");
//        combinationDivideValidNegative(valueOf(977), valueOf(44479), "0.0219654218844848");
//        combinationDivideValidNegative(valueOf(986), valueOf(624), "1.5801282051282051");

        combinationDivideValidNegative(valueOf(1008), valueOf(73), "13.8082191780821918");
        combinationDivideValidNegative(valueOf(1029), valueOf(17), "60.5294117647058824");
        combinationDivideValidNegative(valueOf(1038), valueOf(25), "41.52");
        combinationDivideValidNegative(valueOf(1045), valueOf(45), "23.2222222222222222");
        combinationDivideValidNegative(valueOf(1052), valueOf(77), "13.6623376623376623");
        combinationDivideValidNegative(valueOf(1061), valueOf(334), "3.1766467065868263");
        combinationDivideValidNegative(valueOf(1071), valueOf(45), "23.8");
        combinationDivideValidNegative(valueOf(1085), valueOf(64), "16.953125");
        combinationDivideValidNegative(valueOf(1097), valueOf(86), "12.7558139534883721");
        combinationDivideValidNegative(valueOf(1105), valueOf(73), "15.136986301369863");
        combinationDivideValidNegative(valueOf(1114), valueOf(17), "65.5294117647058824");
        combinationDivideValidNegative(valueOf(1123), valueOf(25), "44.92");
        combinationDivideValidNegative(valueOf(1138), valueOf(45), "25.2888888888888889");
        combinationDivideValidNegative(valueOf(1147), valueOf(77), "14.8961038961038961");
        combinationDivideValidNegative(valueOf(1154), valueOf(334), "3.4550898203592814");
        combinationDivideValidNegative(valueOf(1163), valueOf(45), "25.8444444444444444");
        combinationDivideValidNegative(valueOf(1178), valueOf(64), "18.40625");
        combinationDivideValidNegative(valueOf(1186), valueOf(86), "13.7906976744186047");
        combinationDivideValidNegative(valueOf(1210), valueOf(21), "57.619047619047619");
        combinationDivideValidNegative(valueOf(1214), valueOf(12), "101.1666666666666667");
        combinationDivideValidNegative(valueOf(1226), valueOf(3642), "0.3366282262493136");
        combinationDivideValidNegative(valueOf(1237), valueOf(1), "1237");
        combinationDivideValidNegative(valueOf(1244), valueOf(42), "29.619047619047619");
        combinationDivideValidNegative(valueOf(1253), valueOf(531), "2.35969868173258");
        combinationDivideValidNegative(valueOf(1260), valueOf(112), "11.25");
        combinationDivideValidNegative(valueOf(1278), valueOf(8), "159.75");
        combinationDivideValidNegative(valueOf(1286), valueOf(30), "42.8666666666666667");
        combinationDivideValidNegative(valueOf(1301), valueOf(5), "260.2");
        combinationDivideValidNegative(valueOf(1314), valueOf(12), "109.5");
        combinationDivideValidNegative(valueOf(1328), valueOf(13), "102.1538461538461538");
        combinationDivideValidNegative(valueOf(1331), valueOf(87), "15.2988505747126437");
        combinationDivideValidNegative(valueOf(1348), valueOf(63), "21.3968253968253968");
        combinationDivideValidNegative(valueOf(1356), valueOf(44), "30.8181818181818182");
        combinationDivideValidNegative(valueOf(1367), valueOf(89), "15.3595505617977528");
        combinationDivideValidNegative(valueOf(1376), valueOf(661), "2.0816944024205749");
        combinationDivideValidNegative(valueOf(1389), valueOf(334), "4.1586826347305389");
        combinationDivideValidNegative(valueOf(1403), valueOf(2), "701.5");
        combinationDivideValidNegative(valueOf(1418), valueOf(56), "25.3214285714285714");
        combinationDivideValidNegative(valueOf(1428), valueOf(782), "1.8260869565217391");
        combinationDivideValidNegative(valueOf(1431), valueOf(3368), "0.4248812351543943");
        combinationDivideValidNegative(valueOf(1449), valueOf(3225), "0.4493023255813953");
        combinationDivideValidNegative(valueOf(1453), valueOf(12), "121.0833333333333333");
        combinationDivideValidNegative(valueOf(1467), valueOf(89), "16.4831460674157303");
        combinationDivideValidNegative(valueOf(1479), valueOf(78), "18.9615384615384615");
        combinationDivideValidNegative(valueOf(1492), valueOf(996), "1.4979919678714859");
        combinationDivideValidNegative(valueOf(1512), valueOf(5), "302.4");
        combinationDivideValidNegative(valueOf(1524), valueOf(51), "29.8823529411764706");
        combinationDivideValidNegative(valueOf(1539), valueOf(5842), "0.2634371790482711");
        combinationDivideValidNegative(valueOf(1547), valueOf(21), "73.6666666666666667");
        combinationDivideValidNegative(valueOf(1553), valueOf(841235), "0.0018460953241365");
        combinationDivideValidNegative(valueOf(1562), valueOf(52), "30.0384615384615385");
        combinationDivideValidNegative(valueOf(1570), valueOf(448), "3.5044642857142857");
        combinationDivideValidNegative(valueOf(1586), valueOf(236), "6.7203389830508475");
        combinationDivideValidNegative(valueOf(1599), valueOf(56736), "0.0281831641285956");
        combinationDivideValidNegative(valueOf(1614), valueOf(214), "7.5420560747663551");
        combinationDivideValidNegative(valueOf(1628), valueOf(120), "13.5666666666666667");
        combinationDivideValidNegative(valueOf(1638), valueOf(2289), "0.7155963302752294");
        combinationDivideValidNegative(valueOf(1642), valueOf(512), "3.20703125");
        combinationDivideValidNegative(valueOf(1657), valueOf(51), "32.4901960784313725");
        combinationDivideValidNegative(valueOf(1661), valueOf(6996), "0.2374213836477987");
        combinationDivideValidNegative(valueOf(1679), valueOf(511), "3.2857142857142857");
        combinationDivideValidNegative(valueOf(1683), valueOf(531), "3.1694915254237288");
        combinationDivideValidNegative(valueOf(1690), valueOf(789), "2.1419518377693283");
        combinationDivideValidNegative(valueOf(1704), valueOf(52), "32.7692307692307692");
        combinationDivideValidNegative(valueOf(1718), valueOf(4521), "0.3800044238000442");
        combinationDivideValidNegative(valueOf(1721), valueOf(45), "38.2444444444444444");
        combinationDivideValidNegative(valueOf(1739), valueOf(2365), "0.7353065539112051");
        combinationDivideValidNegative(valueOf(1742), valueOf(56), "31.1071428571428571");
        combinationDivideValidNegative(valueOf(1756), valueOf(4453), "0.3943408937794745");
        combinationDivideValidNegative(valueOf(1763), valueOf(56), "31.4821428571428571");
        combinationDivideValidNegative(valueOf(1777), valueOf(4452), "0.3991464510332435");
        combinationDivideValidNegative(valueOf(1785), valueOf(41), "43.5365853658536585");
        combinationDivideValidNegative(valueOf(1812), valueOf(66), "27.4545454545454545");
        combinationDivideValidNegative(valueOf(1824), valueOf(12), "152");
        combinationDivideValidNegative(valueOf(1831), valueOf(6631), "0.2761272809530991");
        combinationDivideValidNegative(valueOf(1847), valueOf(45), "41.0444444444444444");
        combinationDivideValidNegative(valueOf(1856), valueOf(756), "2.455026455026455");
        combinationDivideValidNegative(valueOf(1862), valueOf(5139), "0.3623273010313291");
        combinationDivideValidNegative(valueOf(1879), valueOf(48), "39.1458333333333333");
        combinationDivideValidNegative(valueOf(1882), valueOf(459), "4.1002178649237473");
        combinationDivideValidNegative(valueOf(1893), valueOf(4223), "0.4482595311390007");
        combinationDivideValidNegative(valueOf(1905), valueOf(25), "76.2");
        combinationDivideValidNegative(valueOf(1914), valueOf(55), "34.8");
        combinationDivideValidNegative(valueOf(1927), valueOf(986), "1.9543610547667343");
        combinationDivideValidNegative(valueOf(1935), valueOf(563), "3.4369449378330373");
        combinationDivideValidNegative(valueOf(1946), valueOf(887), "2.1939120631341601");
        combinationDivideValidNegative(valueOf(1952), valueOf(96), "20.3333333333333333");
        combinationDivideValidNegative(valueOf(1963), valueOf(367), "5.3487738419618529");
        combinationDivideValidNegative(valueOf(1977), valueOf(44479), "0.0444479417253086");
        combinationDivideValidNegative(valueOf(1986), valueOf(624), "3.1826923076923077");



    }

    void assertionDivideValid(BigDecimal x, BigDecimal y, BigDecimal divide) {
        BigDecimal divisionActual = Arithmetic.divide(x, y);
        divide = scaleForBigdecimal(divide.stripTrailingZeros());
        assertEquals(divide, divisionActual);
        assertEquals(divide, scaleForBigdecimal(x.divide(y,16,RoundingMode.HALF_UP).stripTrailingZeros()));
    }

    void assertionDivideNotValid(BigDecimal x, BigDecimal y) {
        assertEquals("Деление на ноль невозможно", Arithmetic.divide(x, y));
    }

    void combinationDivideValidNegative(BigDecimal x, BigDecimal y, String divideXY) {
        BigDecimal division = scaleForBigdecimal(x.divide(y, 16, RoundingMode.HALF_UP).stripTrailingZeros());
        System.out.println("combinationDivideValidNegative(valueOf("+x+"), valueOf("+y+"), \""+
                division+"\");");

//        BigDecimal xNegative = x.divide(valueOf(-1));
//        BigDecimal yNegative = y.divide(valueOf(-1));
//        String divideXYNegative = "-" + divideXY;
//
//
//        combinationsDivideValidMovePoint(x, y, divideXY);
//        combinationsDivideValidMovePoint(x, yNegative, divideXYNegative);
//
//        combinationsDivideValidMovePoint(xNegative, y, divideXYNegative);
//        combinationsDivideValidMovePoint(xNegative, yNegative, divideXY);
    }

    void combinationsDivideValidMovePoint(BigDecimal x, BigDecimal y, String divide) {
        BigDecimal sumBig = new BigDecimal(divide);

        pointMovement(x, y, sumBig, 0);
        pointMovement(x, y, sumBig, 1);
        pointMovement(x, y, sumBig, 2);
        pointMovement(x, y, sumBig, 3);
        pointMovement(x, y, sumBig, 4);
        pointMovement(x, y, sumBig, 5);
        pointMovement(x, y, sumBig, 6);
        pointMovement(x, y, sumBig, 7);
        pointMovement(x, y, sumBig, 8);
        pointMovement(x, y, sumBig, 9);
        pointMovement(x, y, sumBig, 10);
        pointMovement(x, y, sumBig, 11);
        pointMovement(x, y, sumBig, 12);
        pointMovement(x, y, sumBig, 13);
        pointMovement(x, y, sumBig, 14);
        pointMovement(x, y, sumBig, 15);
        pointMovement(x, y, sumBig, 16);
    }

    void pointMovement(BigDecimal x, BigDecimal y, BigDecimal divide, int point) {
        x = x.movePointLeft(point);
        y = y.movePointLeft(point);
//        divide = divide.movePointLeft(point+point);

//        if(y.compareTo(BigDecimal.ZERO) == 0){
//            assertionDivideNotValid(x, y);
//        }
        assertionDivideValid(x, y, divide);

    }

    void  multiplyZero(BigDecimal x, BigDecimal y){
        assertionDivideValid(x, valueOf(0), valueOf(0));
        assertionDivideValid(valueOf(0), y, valueOf(0));
    }

    static BigDecimal scaleForBigdecimal(BigDecimal numberDouble) {
        if (numberDouble.scale() < 0) {
            numberDouble = numberDouble.setScale(0);
        }
        return numberDouble;
    }
}